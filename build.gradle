import net.minecraftforge.forge.tasks.*
import net.minecraftforge.gradle.patcher.tasks.GenerateUserdevConfig

import static net.minecraftforge.forge.tasks.Util.*
import net.minecraftforge.gradle.common.tasks.ApplyBinPatches
import net.minecraftforge.gradle.common.tasks.DownloadMavenArtifact
import net.minecraftforge.gradle.common.tasks.SignJar
import net.minecraftforge.gradle.userdev.tasks.RenameJar
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'net.minecraftforge.gradleutils' version '1.+'
    id 'eclipse'
    id 'de.undercouch.download' version '4.1.2'
    id 'org.javamodularity.moduleplugin' version '1.8.3' apply false
}
// Note: ForgeGradle version is defined in buildSrc/build.gradle

Util.init() //Init all our extension methods!

ext {
    JAR_SIGNER = null
    if (project.hasProperty('keystore')) {
        JAR_SIGNER = [
            storepass: project.properties.keystoreStorePass,
            keypass: project.properties.keystoreKeyPass,
            keystore: project.properties.keystore
        ]
    }

    GIT_INFO = gradleutils.gitInfo
    VERSION = gradleutils.getFilteredMCTagOffsetBranchVersion(true, '[0-9]', MC_VERSION)
    // FML_VERSION = gradleutils.getFilteredMCTagOffsetBranchVersion(true, 'FML', MC_VERSION)
    FORGE_VERSION = VERSION.substring(MC_VERSION.length() + 1)

    sharedDeps = {} as Closure
    extraTxts = []
    changelogFile = null as File
    sharedFmlonlyForge = {} as Closure
}
version = ext.VERSION

println('Version: ' + rootProject.VERSION +
        ' Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch'))

extraTxts = [
    rootProject.file('CREDITS.txt'),
    rootProject.file('LICENSE.txt')
]

changelogFile = rootProject.file('build/changelog.txt')
if (changelogFile.exists())
    extraTxts += changelogFile

var downloadVersionManifest = tasks.register('downloadVersionManifest', Download) {
    src 'https://launchermeta.mojang.com/mc/game/version_manifest_v2.json'
    dest file('build/versions/version_manifest.json')
    useETag 'all'
    onlyIfModified true
    quiet true
}
var downloadJson = tasks.register('downloadJson', Download) {
    inputs.file downloadVersionManifest.map { it.dest }
    src { downloadVersionManifest.map { it.dest }.map { it.json.versions.find { it.id == MC_VERSION }.url } }
    dest file("build/versions/${MC_VERSION}/version.json")
    useETag 'all'
    onlyIfModified true
    quiet true
}
['client', 'server'].each { id ->
    tasks.register("download${id.capitalize()}Raw", Download) {
        inputs.file downloadJson.map { it.dest }
        src { downloadJson.map { it.dest }.map { it.json.downloads.get(id).url } }
        dest file("build/versions/${rootProject.MC_VERSION}/${id}.jar")
        useETag 'all'
        onlyIfModified true
        quiet true
    }
}

subprojects {
    apply plugin: 'root.shared-conventions'
}

project(':mcp') {
}

project(':clean') {
    evaluationDependsOn(':mcp')
}

sharedDeps = {
    moduleonly "cpw.mods:securejarhandler:${rootProject.SECUREJARHANDLER_VERSION}"
    moduleonly "org.ow2.asm:asm:${rootProject.ASM_VERSION}"
    moduleonly "org.ow2.asm:asm-commons:${rootProject.ASM_VERSION}"
    moduleonly "org.ow2.asm:asm-tree:${rootProject.ASM_VERSION}"
    moduleonly "org.ow2.asm:asm-util:${rootProject.ASM_VERSION}"
    moduleonly "org.ow2.asm:asm-analysis:${rootProject.ASM_VERSION}"
    moduleonly "cpw.mods:bootstraplauncher:${rootProject.BOOTSTRAPLAUNCHER_VERSION}"

    installer "cpw.mods:securejarhandler:${rootProject.SECUREJARHANDLER_VERSION}"
    installer "org.ow2.asm:asm:${rootProject.ASM_VERSION}"
    installer "org.ow2.asm:asm-commons:${rootProject.ASM_VERSION}"
    installer "org.ow2.asm:asm-tree:${rootProject.ASM_VERSION}"
    installer "org.ow2.asm:asm-util:${rootProject.ASM_VERSION}"
    installer "org.ow2.asm:asm-analysis:${rootProject.ASM_VERSION}"
    installer "net.minecraftforge:accesstransformers:${rootProject.ACCESSTRANSFORMERS_VERSION}"
    installer 'org.antlr:antlr4-runtime:4.9.1' //Dep of AccessTransformer
    installer "net.minecraftforge:eventbus:${rootProject.EVENTBUS_VERSION}"
    installer "net.minecraftforge:forgespi:${rootProject.SPI_VERSION}"
    installer "net.minecraftforge:coremods:${rootProject.COREMODS_VERSION}"
    installer "cpw.mods:modlauncher:${rootProject.MODLAUNCHER_VERSION}"
    installer 'net.minecraftforge:unsafe:0.2.+'
    installer 'com.electronwill.night-config:core:3.6.4'
    installer 'com.electronwill.night-config:toml:3.6.4'
    installer 'org.apache.maven:maven-artifact:3.6.3'
    installer 'org.apache.commons:commons-lang3:3.12.0'
    installer 'net.jodah:typetools:0.8.3'
    installer 'org.apache.logging.log4j:log4j-api:2.15.0' //TODO: Unpin in 1.18.1 or when Mojang bumps the Log4J version
    installer 'org.apache.logging.log4j:log4j-core:2.15.0' //TODO: Unpin in 1.18.1 or when Mojang bumps the Log4J version
    installer 'org.apache.logging.log4j:log4j-slf4j18-impl:2.15.0' //TODO: Unpin in 1.18.1 or when Mojang bumps the Log4J version
    installer 'net.minecrell:terminalconsoleappender:1.2.0'
    installer 'org.jline:jline-reader:3.12.+'   //Dep of TerminaalConsoleeAppender
    installer 'org.jline:jline-terminal:3.12.+' //Dep of TerminaalConsoleeAppender
    installer 'net.sf.jopt-simple:jopt-simple:5.0.4'
    installer "org.spongepowered:mixin:${rootProject.MIXIN_VERSION}"
    installer 'org.openjdk.nashorn:nashorn-core:15.3'
    installer 'com.google.guava:guava:31.0.1-jre'
    installer 'com.google.code.gson:gson:2.8.8'

    /*
    installer 'org.lwjgl:lwjgl:3.2.2'
    installer 'org.lwjgl:lwjgl-glfw:3.2.2'
    installer 'org.lwjgl:lwjgl-opengl:3.2.2'
    installer 'org.lwjgl:lwjgl-stb:3.2.2'
    */
}

sharedFmlonlyForge = { Project prj ->
    ['Client', 'Server', 'Joined'].each { side ->
        ['slim', 'extra'].each { type ->
            prj.tasks.register("download${side}${type.capitalize()}", DownloadMavenArtifact) {
                artifact = "net.minecraft:${side.toLowerCase()}:${rootProject.MC_VERSION}-${rootProject.MCP_VERSION}:${type}"
            }
        }

        if (side.equals('Joined')) {
            prj.tasks.register('createJoinedSRG', DownloadMavenArtifact) {
                artifact = "net.minecraft:joined:${rootProject.MC_VERSION}-${rootProject.MCP_VERSION}:srg"
            }
        } else {
            prj.tasks.register("create${side}SRG", RenameJar) {
                dependsOn prj.tasks.named('createMcp2Srg')
                tool = rootProject.FART
                args = [
                        '--input', '{input}',
                        '--output', '{output}',
                        '--names', '{mappings}',
                        '--ann-fix', '--ids-fix', '--src-fix', '--record-fix'
                ]
                mappings = prj.tasks.createMcp2Srg.srg
                input = prj.tasks.getByName("download${side}Slim").output
                output = prj.file("build/create${side}SRG/output.jar")
            }
        }

        var gen = prj.tasks.named("gen${side}BinPatches")
        var createSRG = prj.tasks.named("create${side}SRG")
        gen.configure {
            dependsOn(createSRG)
            tool = rootProject.BINPATCH_TOOL
            cleanJar = createSRG.flatMap { it.output }
        }

        prj.tasks.register("apply${side}BinPatches", ApplyBinPatches) {
            clean = gen.flatMap { it.cleanJar }
            patch = gen.flatMap { it.output }
            tool = rootProject.BINPATCH_TOOL
        }
    }

    prj.tasks.register('downloadInstaller', DownloadMavenArtifact) {
        artifact = "net.minecraftforge:installer:${rootProject.INSTALLER_VERSION}:shrunk"
        changing = true
    }

    prj.afterEvaluate {
        [prj.tasks.universalJar, prj.tasks.installerJar].each { t ->
            var signTask = prj.tasks.register("sign${t.name.capitalize()}", SignJar) {
                dependsOn t
                onlyIf {
                    rootProject.JAR_SIGNER != null && t.state.failure == null
                }
                def jarsigner = rootProject.JAR_SIGNER == null ? [:] : rootProject.JAR_SIGNER
                alias = 'forge'
                storePass = jarsigner.storepass
                keyPass = jarsigner.keypass
                keyStore = jarsigner.keystore
                inputFile = t.archiveFile.get().asFile
                outputFile = t.archiveFile.get().asFile
                doFirst {
                    prj.logger.lifecycle('Signing: ' + inputFile)
                }
            }
            t.finalizedBy(signTask)
        }
    }

    prj.tasks.named('userdevConfig', GenerateUserdevConfig).configure {
        def launchPrefix = prj.name == "forge" ? "forge" : "fml"
        getArtifacts(prj, prj.configurations.installer, true).each { key, lib -> libraries.add(lib.name) }
        getArtifacts(prj, prj.configurations.moduleonly, true).each { key, lib ->
            libraries.add(lib.name)
            modules.add(lib.name)
        }
        for (child in prj.ext.PACKED_DEPS) {
            libraries.add(Util.getMavenDep(rootProject.tasks.findByPath(child)))
        }
        //libraries.add("${project.group}:${project.name}:${project.version}:launcher")
        inject = '' // We don't have a userdev sourceset anymore. Empty as a gradle workaround...
        runs {
            client {
                environment 'MOD_CLASSES', '{source_roots}'
                environment 'MCP_MAPPINGS', '{mcp_mappings}'

                property 'nativesDirectory', '{natives}'

                args '--launchTarget', "${launchPrefix}clientuserdev"
                args '--version', 'MOD_DEV'
                args '--assetIndex', '{asset_index}'
                args '--assetsDir', '{assets_root}'
            }

            server {
                environment 'MOD_CLASSES', '{source_roots}'
                environment 'MCP_MAPPINGS', '{mcp_mappings}'

                args '--launchTarget', "${launchPrefix}serveruserdev"
            }

            data {
                environment 'MOD_CLASSES', '{source_roots}'
                environment 'MCP_MAPPINGS', '{mcp_mappings}'

                args '--launchTarget', "${launchPrefix}datauserdev"
                args '--assetIndex', '{asset_index}'
                args '--assetsDir', '{assets_root}'
            }
        }
    }

    def userdevRuns = prj.tasks.userdevConfig.runs
    for (def run : prj.patcher.runs + userdevRuns) {
        if (run.parents) continue // We already added this to the parent run config
        //run.property 'bsl.debug', 'true'
        run.main 'cpw.mods.bootstraplauncher.BootstrapLauncher'

        run.args '--gameDir', '.'
        run.args '--fml.forgeVersion', rootProject.FORGE_VERSION
        run.args '--fml.mcVersion', rootProject.MC_VERSION
        run.args '--fml.forgeGroup', prj.group
        run.args '--fml.mcpVersion', rootProject.MCP_VERSION

        if (run.name.contains('client')) {
            run.client true
        } else {
            run.client false
        }

        // SecureJarHandler bootstrap values.
        run.property 'ignoreList', prj.configurations.moduleonly.files.collect {it.name.replaceAll(/([-_]([.\d]*\d+)|\.jar$)/, '') }.join(',') + ",client-extra,fmlcore,javafmllanguage,mclanguage,${prj.name}-"
        run.property 'mergeModules', 'jna-5.8.0.jar,jna-platform-58.0.jar,java-objc-bridge-1.0.0.jar'
        if (userdevRuns.contains(run)) {
            run.property 'legacyClassPath.file', '{minecraft_classpath_file}'
            run.jvmArgs '-p', '{modules}'
        } else {
            run.property 'legacyClassPath.file', '{runtime_classpath_file}'
            run.jvmArgs '-p', prj.configurations.moduleonly.files.collect { it.path }.join(File.pathSeparator)
        }
        run.jvmArgs '--add-modules', 'ALL-MODULE-PATH'
        run.jvmArgs '--add-opens', 'java.base/java.util.jar=cpw.mods.securejarhandler'
        run.jvmArgs '--add-exports', 'java.base/sun.security.util=cpw.mods.securejarhandler'
        run.jvmArgs '--add-exports', 'jdk.naming.dns/com.sun.jndi.dns=java.naming'
    }
    for (def run : prj.patcher.runs) {
        if (run.parents) continue // We already added this to the parent run config
        run.workingDirectory prj.file('run')

        if (run.name.contains('client') || run.name.contains('data')) {
            run.property 'nativesDirectory', prj.extractNatives.output.get().asFile
            run.args '--assetsDir', prj.downloadAssets.output
            run.args '--assetIndex', "{asset_index}"
        }

        if (run.name.contains('client')) {
            run.property 'org.lwjgl.system.SharedLibraryExtractDirectory', 'lwjgl_dll'
            run.args '--username', 'Dev'
            run.args '--version', prj.name
            run.args '--uuid', '0'
            run.args '--accessToken', '0'
            run.args '--userType', 'mojang'
            run.args '--versionType', 'release'
        }

        if (prj.name == 'forge') {
            run.environment 'FORGE_SPEC', prj.SPEC_VERSION
        }
    }

    eclipse.project.resourceFilter {
        appliesTo = 'FOLDERS'
        type = 'EXCLUDE_ALL'
        matcher {
            id = 'org.eclipse.ui.ide.multiFilter'
            arguments = '1.0-name-matches-false-false-run'
        }
    }

    def MODULE_PATH = Util.getArtifacts(prj, prj.configurations.moduleonly, false).values().collect{"libraries/${it.downloads.artifact.path}"}
    def tokens = [
            TASK:          prj.name.equals('forge') ? 'forgeserver' : 'fmlserver',
            MAVEN_PATH:    prj.ext.MAVEN_PATH.toString(),
            FORGE_VERSION: rootProject.FORGE_VERSION,
            MC_VERSION:    rootProject.MC_VERSION,
            MCP_VERSION:   rootProject.MCP_VERSION,
            FORGE_GROUP:   prj.group,
            IGNORE_LIST: Util.getArtifacts(prj, prj.configurations.moduleonly, false).values().collect{it.downloads.artifact.path.rsplit('/', 1)[1]}.join(','),
            MODULES: 'ALL-MODULE-PATH'
    ]

    prj.tasks.register('makeClasspathFiles', Task) {
        dependsOn rootProject.downloadServerRaw
        doLast {
            def CLASS_PATH = Util.getArtifacts(prj, prj.configurations.installer, false).values().collect{"libraries/${it.downloads.artifact.path}"} +
            [
                'libraries/' + Util.getMavenPath(rootProject.tasks.findByPath(':fmlloader:jar')),
                "libraries/net/minecraft/server/${rootProject.MC_VERSION}-${rootProject.MCP_VERSION}/server-${rootProject.MC_VERSION}-${rootProject.MCP_VERSION}-extra.jar"
            ]
            def claimed = CLASS_PATH.collect{ it.rsplit('/', 2)[0] }.toSet() // Allow us to override versions
            try (def zip = new java.util.zip.ZipFile(rootProject.downloadServerRaw.dest)) {
                CLASS_PATH += zip.getInputStream(zip.getEntry('META-INF/classpath-joined')).text.split(';')
                    .findAll{ it.startsWith('libraries/') && !claimed.contains(it.rsplit('/', 2)[0]) }
            }

            configure(prj.installerJar) {
                from(rootProject.file('server_files/args.txt')) {
                    filter(ReplaceTokens, tokens: tokens + [MODULE_PATH: MODULE_PATH.join(';'), CLASS_PATH: CLASS_PATH.join(';')])
                    rename { 'data/win_args.txt' }
                }

                from(rootProject.file('server_files/args.txt')) {
                    filter(ReplaceTokens, tokens: tokens + [MODULE_PATH: MODULE_PATH.join(':'), CLASS_PATH: CLASS_PATH.join(':')])
                    rename { 'data/unix_args.txt' }
                }
            }
        }
    }

    prj.afterEvaluate {
        prj.tasks.named('installerJar', Zip).configure {
            dependsOn 'makeClasspathFiles'
            from(rootProject.file('server_files/')) {
                exclude 'args.txt'
                filter(ReplaceTokens, tokens: tokens)
                into('data/')
                //rename 'run.sh',  "run_forge_${rootProject.VERSION.replace('-', '_').sh"
                //rename 'run.bat', "run_forge_${rootProject.VERSION.replace('-', '_').bat"
            }
        }
    }
}

def symlink = file("$rootDir/fmlonly/src/fmlcommon")
def symlinkValid = symlink.exists() && symlink.directory

if (symlinkValid)
project(':fmlonly') {
    evaluationDependsOn(':mcp')
}

project(':forge') {
    evaluationDependsOn(':clean')
}

//evaluationDependsOnChildren()
tasks.register('setup', Task) {  //These must be strings so that we can do lazy resolution. Else we need evaluationDependsOnChildren above
    dependsOn ':clean:extractMapped'
    if (symlinkValid)
        dependsOn ':fmlonly:extractMapped'
    dependsOn ':forge:extractMapped'
}
